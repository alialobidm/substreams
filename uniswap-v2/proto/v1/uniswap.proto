syntax = "proto3";

import "erc20.proto";
package messari.uniswap.v2;

message BigInt {
  bytes value = 1;
  string repr = 2;
}

message BigDecimal {
  BigInt int_val = 1;
  int64 scale = 2;
}

message Pools {
  repeated Pool pools = 1;
}

message Pool {
  // Smart contract address of the pool
  string address = 1;

  // Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
  string name = 2;

  // Symbol of liquidity pool (e.g. 3CRV)
  string symbol = 3;

  // Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
  messari.erc20.v1.ERC20Tokens input_tokens = 4;

  // Token that is minted to track ownership of position in protocol
  messari.erc20.v1.ERC20Token output_token = 5;

  // Creation timestamp
  int64 created_timestamp = 6;

  // Creation block number
  int64 created_block_number = 7;
}

message Events {
  repeated Event events = 1;
}

message Event {
  oneof type {
    Deposit deposit = 1;
    Withdraw withdraw = 2;
    Swap swap = 3;
  }

  // Transaction hash of the transaction that emitted this event.
  string hash = 100;

  // Event log index. For transactions that don't emit event, create arbitrary index starting from 0,
  int64 log_index = 101;

  // Event log index. For transactions that don't emit event, create arbitrary index starting from 0,
  int64 log_ordinal = 102;

  // Address that received the tokens.
  string to = 103;

  // Address that sent the tokens.
  string from = 104;

  // Block number of this event.
  int64 block_number = 105;

  // Timestamp of this event.
  int64 timestamp = 106;

  // The pool involving this transaction.
  string pool = 107;
}

message Deposit {
  // Amount of input tokens in the token's native unit.
  repeated BigInt input_token_amounts = 1;

  // Amount of output tokens in the token's native unit.
  optional BigInt output_token_amount = 2;

  // USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  BigDecimal amount_USD = 3;
}

message Withdraw {
  // Amount of input tokens in the token's native unit.
  repeated BigInt input_token_amounts = 12;

  // Amount of output tokens in the token's native unit.
  optional BigInt output_token_amount = 13;

  // USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  BigDecimal amount_USD = 14;
}

message Swap {
  // Token deposited into pool.
  messari.erc20.v1.ERC20Token token_in = 1;

  // Amount of token deposited into pool in native units.
  BigInt amount_in = 2;

  // Amount of token deposited into pool in USD.
  BigDecimal amount_in_USD = 3;

  // Token withdrawn from pool.
  messari.erc20.v1.ERC20Token token_out = 4;

  // Amount of token withdrawn from pool in native units.
  BigInt amount_out = 5;

  // Amount of token withdrawn from pool in USD.
  BigDecimal amount_out_USD = 6;
}

message DexAmmProtocol {
  // Smart contract address of the protocol's main contract (Factory, Registry, etc)
  string id = 1;

  // Name of the protocol, including version. e.g. Uniswap v3
  string name = 2;

  // Slug of protocol, including version. e.g. uniswap-v3
  string slug = 3;

  // Version of the substream schema, in SemVer format (e.g. 1.0.0)
  string schema_version = 4;

  // Version of the substream implementation, in SemVer format (e.g. 1.0.0)
  string substream_version = 5;

  // Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
  string methodology_version = 6;

  // The blockchain network this substream is indexing on
  string network = 7;

  // The type of protocol (e.g. DEX, Lending, Yield, etc)
  string protocol_type = 8;

  // ##### Quantitative Data #####

  // Number of cumulative unique users
  int64 cumulative_unique_users = 9;

  // Total number of pools
  int64 total_pool_count = 10;

  // ##### Snapshots #####

  // Daily usage metrics for this protocol
  UsageMetricsDailySnapshots daily_usage_metrics_snapshots = 11;

  // Hourly usage metrics for this protocol
  UsageMetricsHourlySnapshots hourly_usage_metrics_snapshots = 12;

  message UsageMetricsDailySnapshot {
    // ID is # of days since Unix epoch time
    string id = 1;
  
    // Protocol this snapshot is associated with
    string protocol = 2;
  
    // Number of unique daily active users
    int64 daily_active_users = 3;
  
    // Number of cumulative unique users
    int64 cumulative_unique_users = 4;
  
    // Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface
    int64 daily_transaction_count = 5;
  
    // Total number of deposits (add liquidity) in a day
    int64 daily_deposit_count = 6;
  
    // Total number of withdrawals (remove liquidity) in a day
    int64 daily_withdraw_count = 7;
  
    // Total number of trades (swaps) in a day
    int64 daily_swap_count = 8;
  
    // Total number of pools
    int64 total_pool_count = 9;
  
    // Block number of this snapshot
    int64 block_number = 10;
  
    // Timestamp of this snapshot
    int64 timestamp = 11;
  }

  message UsageMetricsHourlySnapshot {
    // { # of hours since Unix epoch time }
    string id = 1;

    // Protocol this snapshot is associated with
    string protocol = 2;

    // Number of unique hourly active users
    int64 hourly_active_users = 3;

    // Number of cumulative unique users
    int64 cumulative_unique_users = 4;

    // Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
    int64 hourly_transaction_count = 5;

    // Total number of deposits (add liquidity) in an hour
    int64 hourly_deposit_count = 6;

    // Total number of withdrawals (remove liquidity) in an hour
    int64 hourly_withdraw_count = 7;

    // Total number of trades (swaps) in an hour
    int64 hourly_swap_count = 8;

    // Block number of this snapshot
    int64 block_number = 9;

    // Timestamp of this snapshot
    int64 timestamp = 10;
  }

  message UsageMetricsDailySnapshots {
    repeated UsageMetricsDailySnapshot snapshots = 1;
  }

  message UsageMetricsHourlySnapshots {
    repeated UsageMetricsHourlySnapshot snapshots = 1;
  }
}

message LiquidityPoolDailySnapshot {
  // Daily revenue generated by the liquidity pool, accrued to the supply side.
  BigDecimal daily_supply_side_revenue_usd = 2;

  // Daily revenue generated by the liquidity pool, accrued to the protocol.
  BigDecimal daily_protocol_side_revenue_usd = 4;

  // Daily revenue generated by the liquidity pool.
  BigDecimal daily_total_revenue_usd = 6;

  // All trade volume occurred in a given day, in USD
  BigDecimal daily_volume_usd = 7;
}

message LiquidityPoolHourlySnapshot {
  // Hourly revenue generated by the liquidity pool, accrued to the supply side.
  BigDecimal hourly_supply_side_revenue_usd = 2;

  // Hourly revenue generated by the liquidity pool, accrued to the protocol.
  BigDecimal hourly_protocol_side_revenue_usd = 4;

  // Hourly revenue generated by the liquidity pool.
  BigDecimal hourly_total_revenue_usd = 6;

  // All trade volume occurred in a given hour, in USD
  BigDecimal hourly_volume_usd = 7;
}

message LiquidityPool {
  // Smart contract address of the pool
  string address = 1;

  Pool pool = 2;

  // Current TVL (Total Value Locked) of this pool in USD
  BigDecimal total_value_locked = 3;

  // All revenue generated by the liquidity pool, accrued to the supply side.
  BigDecimal cumulative_supply_side_revenue_usd = 4;

  // All revenue generated by the liquidity pool, accrued to the protocol.
  BigDecimal cumulative_protocol_side_revenue_usd = 5;

  // All revenue generated by the liquidity pool.
  BigDecimal cumulative_total_revenue_usd = 6;

  // All historical trade volume occurred in this pool, in USD
  BigDecimal cumulative_volume_usd = 7;

  // Liquidity pool daily snapshots
  LiquidityPoolDailySnapshot dailySnapshots = 10;

  // Liquidity pool hourly snapshots
  LiquidityPoolHourlySnapshot hourlySnapshots = 11;
}
